// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  passwordHash String
  role         Role
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Session      Session[]
  Appointment  Appointment[]
}

model Session {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  productDistribution ProductDistribution[]
  Appointment         Appointment[]
}

model Product {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  storage             Storage[]
  ProductDistribution ProductDistribution[]
}

model Storage {
  id        Int      @id @default(autoincrement())
  productId Int      @unique
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com a tabela Product
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductDistribution {
  id        Int      @id @default(autoincrement())
  roomId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com a tabela Room
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  // Relacionamento com a tabela Product
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Patient {
  id          Int           @id @default(autoincrement())
  name        String
  email       String
  cpf         String        @unique
  Appointment Appointment[]
}

model Appointment {
  id        Int               @id @default(autoincrement())
  status    AppointmentStatus
  patientId Int
  doctorId  Int
  roomId    Int

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor  User    @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  room    Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  SECRETARY
  DOCTOR
  STORAGE_MANAGER
}

enum AppointmentStatus {
  SCHEDULED
  ON_GOING
  CANCELED
  DONE
}
